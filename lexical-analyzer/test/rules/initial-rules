program --> stmt-sequence(program为开始符号)

stmt-sequence --> stmt-sequence ; statement | statement (存在左递归)
stmt-sequence --> statement stmt'
stmt' --> ;statement stmt' | $


statement --> if-stmt | repeat-stmt | assign-stmt | read-stmt | write-stmt

if-stmt --> if exp then stmt-sequence end
          | if exp then stmt-sequence else stmt-sequence end(化简)

if-stmt --> if exp then stmt-sequence else-part' end
else-part' --> else stmt-sequence | $


repeat-stmt --> repeat stmt-sequence until exp

assign-stmt --> identifier := exp

read-stmt --> read identifier

write-stmt --> write exp

exp --> simple-exp comparison-op simple-exp | simple-exp

comparison-op --> < | =

simple-exp --> simple-exp addop term | term (存在左递归)
simple-exp --> term term'
term' --> addop term term' | $


addop --> + | -

term --> term mulop factor | factor (存在左递归)
term --> factor factor'
factor' --> mulop factor factor' | $

mulop --> * | /

factor --> (exp) | number | identifier


终结符号集合：; if then end else repeat until identifier := read write < = + - * / ( ) number
非终结符号集合： program stmt-sequence stmt' statement if-stmt else-part' repeat-stmt assign-stmt write-stmt exp comparison-op
simple-exp term' addop term factor' mulop factor

"statement", "if-stmt", "repeat-stmt", "repeat-stmt", "assign-stmt", "write-stmt", "exp", "comparison-op", "simple-exp", "term'", "addop", "term", "factor'", "mulop", "factor"